{"code":"#!/usr/bin/env node\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar fs = require(\"fs\");\r\nvar minimist = require(\"minimist\");\r\nvar mkdirp = require(\"mkdirp\");\r\nvar path = require(\"path\");\r\nvar ts = require(\"typescript\");\r\nvar cliSupport = require(\"/node_modules/tsickle/src/cli_support\");\r\nvar tsickle = require(\"/node_modules/tsickle/src/tsickle\");\r\nvar tsickle_1 = require(\"/node_modules/tsickle/src/tsickle\");\r\nfunction usage() {\r\n    console.error(\"usage: tsickle [tsickle options] -- [tsc options]\\n\\nexample:\\n  tsickle --externs=foo/externs.js -- -p src --noImplicitAny\\n\\ntsickle flags are:\\n  --externs=PATH     save generated Closure externs.js to PATH\\n  --typed            [experimental] attempt to provide Closure types instead of {?}\\n\");\r\n}\r\n/**\r\n * Parses the command-line arguments, extracting the tsickle settings and\r\n * the arguments to pass on to tsc.\r\n */\r\nfunction loadSettingsFromArgs(args) {\r\n    var settings = {};\r\n    var parsedArgs = minimist(args);\r\n    for (var _i = 0, _a = Object.keys(parsedArgs); _i < _a.length; _i++) {\r\n        var flag = _a[_i];\r\n        switch (flag) {\r\n            case 'h':\r\n            case 'help':\r\n                usage();\r\n                process.exit(0);\r\n                break;\r\n            case 'externs':\r\n                settings.externsPath = parsedArgs[flag];\r\n                break;\r\n            case 'typed':\r\n                settings.isTyped = true;\r\n                break;\r\n            case 'verbose':\r\n                settings.verbose = true;\r\n                break;\r\n            case '_':\r\n                // This is part of the minimist API, and holds args after the '--'.\r\n                break;\r\n            default:\r\n                console.error(\"unknown flag '--\" + flag + \"'\");\r\n                usage();\r\n                process.exit(1);\r\n        }\r\n    }\r\n    // Arguments after the '--' arg are arguments to tsc.\r\n    var tscArgs = parsedArgs['_'];\r\n    return { settings: settings, tscArgs: tscArgs };\r\n}\r\n/**\r\n * Loads the tsconfig.json from a directory.\r\n *\r\n * TODO(martinprobst): use ts.findConfigFile to match tsc behaviour.\r\n *\r\n * @param args tsc command-line arguments.\r\n */\r\nfunction loadTscConfig(args) {\r\n    // Gather tsc options/input files from command line.\r\n    var _a = ts.parseCommandLine(args), options = _a.options, fileNames = _a.fileNames, errors = _a.errors;\r\n    if (errors.length > 0) {\r\n        return { options: {}, fileNames: [], errors: errors };\r\n    }\r\n    // Store file arguments\r\n    var tsFileArguments = fileNames;\r\n    // Read further settings from tsconfig.json.\r\n    var projectDir = options.project || '.';\r\n    var configFileName = path.join(projectDir, 'tsconfig.json');\r\n    var _b = ts.readConfigFile(configFileName, function (path) { return fs.readFileSync(path, 'utf-8'); }), json = _b.config, error = _b.error;\r\n    if (error) {\r\n        return { options: {}, fileNames: [], errors: [error] };\r\n    }\r\n    (_c = ts.parseJsonConfigFileContent(json, ts.sys, projectDir, options, configFileName), options = _c.options, fileNames = _c.fileNames, errors = _c.errors);\r\n    if (errors.length > 0) {\r\n        return { options: {}, fileNames: [], errors: errors };\r\n    }\r\n    // if file arguments were given to the typescript transpiler then transpile only those files\r\n    fileNames = tsFileArguments.length > 0 ? tsFileArguments : fileNames;\r\n    return { options: options, fileNames: fileNames, errors: [] };\r\n    var _c;\r\n}\r\n/**\r\n * Compiles TypeScript code into Closure-compiler-ready JS.\r\n */\r\nfunction toClosureJS(options, fileNames, settings, writeFile) {\r\n    var compilerHost = ts.createCompilerHost(options);\r\n    var program = ts.createProgram(fileNames, options, compilerHost);\r\n    var transformerHost = {\r\n        shouldSkipTsickleProcessing: function (fileName) {\r\n            return fileNames.indexOf(fileName) === -1;\r\n        },\r\n        shouldIgnoreWarningsForPath: function (fileName) { return false; },\r\n        pathToModuleName: cliSupport.pathToModuleName,\r\n        fileNameToModuleId: function (fileName) { return fileName; },\r\n        es5Mode: true,\r\n        googmodule: true,\r\n        prelude: '',\r\n        transformDecorators: true,\r\n        transformTypesToClosure: true,\r\n        typeBlackListPaths: new Set(),\r\n        untyped: false,\r\n        logWarning: function (warning) { return console.error(tsickle.formatDiagnostics([warning])); },\r\n    };\r\n    var diagnostics = ts.getPreEmitDiagnostics(program);\r\n    if (diagnostics.length > 0) {\r\n        return {\r\n            diagnostics: diagnostics,\r\n            modulesManifest: new tsickle_1.ModulesManifest(),\r\n            externs: {},\r\n            emitSkipped: true,\r\n            emittedFiles: [],\r\n        };\r\n    }\r\n    return tsickle.emitWithTsickle(program, transformerHost, compilerHost, options, undefined, writeFile);\r\n}\r\nexports.toClosureJS = toClosureJS;\r\nfunction main(args) {\r\n    var _a = loadSettingsFromArgs(args), settings = _a.settings, tscArgs = _a.tscArgs;\r\n    var config = loadTscConfig(tscArgs);\r\n    if (config.errors.length) {\r\n        console.error(tsickle.formatDiagnostics(config.errors));\r\n        return 1;\r\n    }\r\n    if (config.options.module !== ts.ModuleKind.CommonJS) {\r\n        // This is not an upstream TypeScript diagnostic, therefore it does not go\r\n        // through the diagnostics array mechanism.\r\n        console.error('tsickle converts TypeScript modules to Closure modules via CommonJS internally. ' +\r\n            'Set tsconfig.js \"module\": \"commonjs\"');\r\n        return 1;\r\n    }\r\n    // Run tsickle+TSC to convert inputs to Closure JS files.\r\n    var result = toClosureJS(config.options, config.fileNames, settings, function (filePath, contents) {\r\n        mkdirp.sync(path.dirname(filePath));\r\n        fs.writeFileSync(filePath, contents, { encoding: 'utf-8' });\r\n    });\r\n    if (result.diagnostics.length) {\r\n        console.error(tsickle.formatDiagnostics(result.diagnostics));\r\n        return 1;\r\n    }\r\n    if (settings.externsPath) {\r\n        mkdirp.sync(path.dirname(settings.externsPath));\r\n        fs.writeFileSync(settings.externsPath, tsickle.getGeneratedExterns(result.externs));\r\n    }\r\n    return 0;\r\n}\r\n// CLI entry point\r\nif (require.main === module) {\r\n    process.exit(main(process.argv.splice(2)));\r\n}\r\n//# sourceMappingURL=main.js.map","sourceMap":{"version":3,"file":"main.js","sourceRoot":"","sources":["node_modules/tsickle/src/main.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as fs from 'fs';\nimport * as minimist from 'minimist';\nimport * as mkdirp from 'mkdirp';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport * as cliSupport from './cli_support';\nimport * as tsickle from './tsickle';\nimport {ModulesManifest} from './tsickle';\nimport {toArray, createSourceReplacingCompilerHost} from './util';\n\n/** Tsickle settings passed on the command line. */\nexport interface Settings {\n  /** If provided, path to save externs to. */\n  externsPath?: string;\n\n  /** If provided, attempt to provide types rather than {?}. */\n  isTyped?: boolean;\n\n  /** If true, log internal debug warnings to the console. */\n  verbose?: boolean;\n}\n\nfunction usage() {\n  console.error(`usage: tsickle [tsickle options] -- [tsc options]\n\nexample:\n  tsickle --externs=foo/externs.js -- -p src --noImplicitAny\n\ntsickle flags are:\n  --externs=PATH     save generated Closure externs.js to PATH\n  --typed            [experimental] attempt to provide Closure types instead of {?}\n`);\n}\n\n/**\n * Parses the command-line arguments, extracting the tsickle settings and\n * the arguments to pass on to tsc.\n */\nfunction loadSettingsFromArgs(args: string[]): {settings: Settings, tscArgs: string[]} {\n  const settings: Settings = {};\n  const parsedArgs = minimist(args);\n  for (const flag of Object.keys(parsedArgs)) {\n    switch (flag) {\n      case 'h':\n      case 'help':\n        usage();\n        process.exit(0);\n        break;\n      case 'externs':\n        settings.externsPath = parsedArgs[flag];\n        break;\n      case 'typed':\n        settings.isTyped = true;\n        break;\n      case 'verbose':\n        settings.verbose = true;\n        break;\n      case '_':\n        // This is part of the minimist API, and holds args after the '--'.\n        break;\n      default:\n        console.error(`unknown flag '--${flag}'`);\n        usage();\n        process.exit(1);\n    }\n  }\n  // Arguments after the '--' arg are arguments to tsc.\n  const tscArgs = parsedArgs['_'];\n  return {settings, tscArgs};\n}\n\n/**\n * Loads the tsconfig.json from a directory.\n *\n * TODO(martinprobst): use ts.findConfigFile to match tsc behaviour.\n *\n * @param args tsc command-line arguments.\n */\nfunction loadTscConfig(args: string[]):\n    {options: ts.CompilerOptions, fileNames: string[], errors: ts.Diagnostic[]} {\n  // Gather tsc options/input files from command line.\n  let {options, fileNames, errors} = ts.parseCommandLine(args);\n  if (errors.length > 0) {\n    return {options: {}, fileNames: [], errors};\n  }\n\n  // Store file arguments\n  const tsFileArguments = fileNames;\n\n  // Read further settings from tsconfig.json.\n  const projectDir = options.project || '.';\n  const configFileName = path.join(projectDir, 'tsconfig.json');\n  const {config: json, error} =\n      ts.readConfigFile(configFileName, path => fs.readFileSync(path, 'utf-8'));\n  if (error) {\n    return {options: {}, fileNames: [], errors: [error]};\n  }\n  ({options, fileNames, errors} =\n       ts.parseJsonConfigFileContent(json, ts.sys, projectDir, options, configFileName));\n  if (errors.length > 0) {\n    return {options: {}, fileNames: [], errors};\n  }\n\n  // if file arguments were given to the typescript transpiler then transpile only those files\n  fileNames = tsFileArguments.length > 0 ? tsFileArguments : fileNames;\n\n  return {options, fileNames, errors: []};\n}\n\n/**\n * Compiles TypeScript code into Closure-compiler-ready JS.\n */\nexport function toClosureJS(\n    options: ts.CompilerOptions, fileNames: string[], settings: Settings,\n    writeFile?: ts.WriteFileCallback): tsickle.EmitResult {\n  const compilerHost = ts.createCompilerHost(options);\n  const program = ts.createProgram(fileNames, options, compilerHost);\n  const transformerHost: tsickle.TsickleHost = {\n    shouldSkipTsickleProcessing: (fileName: string) => {\n      return fileNames.indexOf(fileName) === -1;\n    },\n    shouldIgnoreWarningsForPath: (fileName: string) => false,\n    pathToModuleName: cliSupport.pathToModuleName,\n    fileNameToModuleId: (fileName) => fileName,\n    es5Mode: true,\n    googmodule: true,\n    prelude: '',\n    transformDecorators: true,\n    transformTypesToClosure: true,\n    typeBlackListPaths: new Set(),\n    untyped: false,\n    logWarning: (warning) => console.error(tsickle.formatDiagnostics([warning])),\n  };\n  const diagnostics = ts.getPreEmitDiagnostics(program);\n  if (diagnostics.length > 0) {\n    return {\n      diagnostics,\n      modulesManifest: new ModulesManifest(),\n      externs: {},\n      emitSkipped: true,\n      emittedFiles: [],\n    };\n  }\n  return tsickle.emitWithTsickle(\n      program, transformerHost, compilerHost, options, undefined, writeFile);\n}\n\nfunction main(args: string[]): number {\n  const {settings, tscArgs} = loadSettingsFromArgs(args);\n  const config = loadTscConfig(tscArgs);\n  if (config.errors.length) {\n    console.error(tsickle.formatDiagnostics(config.errors));\n    return 1;\n  }\n\n  if (config.options.module !== ts.ModuleKind.CommonJS) {\n    // This is not an upstream TypeScript diagnostic, therefore it does not go\n    // through the diagnostics array mechanism.\n    console.error(\n        'tsickle converts TypeScript modules to Closure modules via CommonJS internally. ' +\n        'Set tsconfig.js \"module\": \"commonjs\"');\n    return 1;\n  }\n\n  // Run tsickle+TSC to convert inputs to Closure JS files.\n  const result = toClosureJS(\n      config.options, config.fileNames, settings, (filePath: string, contents: string) => {\n        mkdirp.sync(path.dirname(filePath));\n        fs.writeFileSync(filePath, contents, {encoding: 'utf-8'});\n      });\n  if (result.diagnostics.length) {\n    console.error(tsickle.formatDiagnostics(result.diagnostics));\n    return 1;\n  }\n\n  if (settings.externsPath) {\n    mkdirp.sync(path.dirname(settings.externsPath));\n    fs.writeFileSync(settings.externsPath, tsickle.getGeneratedExterns(result.externs));\n  }\n  return 0;\n}\n\n// CLI entry point\nif (require.main === module) {\n  process.exit(main(process.argv.splice(2)));\n}\n"]},"version":"1","isExternal":true,"dependencies":{"modules":["node_modules/tsickle/src/cli_support.ts","node_modules/tsickle/src/tsickle.ts","node_modules/tsickle/src/decorator-annotator.ts","node_modules/tsickle/src/modules_manifest.ts","node_modules/tsickle/src/util.ts"],"mappings":[{"modulePath":"tslib","resolvedPath":null,"external":false,"resolved":false},{"modulePath":"fs","resolvedPath":null,"external":false,"resolved":false},{"modulePath":"minimist","resolvedPath":null,"external":false,"resolved":false},{"modulePath":"mkdirp","resolvedPath":null,"external":false,"resolved":false},{"modulePath":"path","resolvedPath":null,"external":false,"resolved":false},{"modulePath":"typescript","resolvedPath":null,"external":false,"resolved":false},{"modulePath":"./cli_support","resolvedPath":"node_modules/tsickle/src/cli_support","external":false,"resolved":true},{"modulePath":"./tsickle","resolvedPath":"node_modules/tsickle/src/tsickle","external":false,"resolved":true},{"modulePath":"./util","resolvedPath":"node_modules/tsickle/src/util","external":false,"resolved":true}],"refFiles":[],"refTypings":[]},"diagnostics":{"syntacticErrors":[],"semanticErrors":[{"code":2307,"fileName":"node_modules/tsickle/src/main.ts","message":"Cannot find module 'fs'.","line":11,"column":21},{"code":2307,"fileName":"node_modules/tsickle/src/main.ts","message":"Cannot find module 'minimist'.","line":12,"column":27},{"code":2307,"fileName":"node_modules/tsickle/src/main.ts","message":"Cannot find module 'mkdirp'.","line":13,"column":25},{"code":2307,"fileName":"node_modules/tsickle/src/main.ts","message":"Cannot find module 'path'.","line":14,"column":23},{"code":2307,"fileName":"node_modules/tsickle/src/main.ts","message":"Cannot find module 'typescript'.","line":15,"column":21},{"code":2304,"fileName":"node_modules/tsickle/src/main.ts","message":"Cannot find name 'process'.","line":58,"column":9},{"code":2304,"fileName":"node_modules/tsickle/src/main.ts","message":"Cannot find name 'process'.","line":75,"column":9},{"code":2354,"fileName":"node_modules/tsickle/src/main.ts","message":"This syntax requires an imported helper but module 'tslib' cannot be found.","line":93,"column":8},{"code":2322,"fileName":"node_modules/tsickle/src/main.ts","message":"Type '{ diagnostics: any; modulesManifest: ModulesManifest; externs: {}; emitSkipped: boolean; emittedF...' is not assignable to type 'EmitResult'.\n  Object literal may only specify known properties, and 'diagnostics' does not exist in type 'EmitResult'.","line":148,"column":7},{"code":2339,"fileName":"node_modules/tsickle/src/main.ts","message":"Property 'diagnostics' does not exist on type 'EmitResult'.","line":182,"column":14},{"code":2339,"fileName":"node_modules/tsickle/src/main.ts","message":"Property 'diagnostics' does not exist on type 'EmitResult'.","line":183,"column":52},{"code":2304,"fileName":"node_modules/tsickle/src/main.ts","message":"Cannot find name 'require'.","line":195,"column":5},{"code":2304,"fileName":"node_modules/tsickle/src/main.ts","message":"Cannot find name 'module'.","line":195,"column":22},{"code":2304,"fileName":"node_modules/tsickle/src/main.ts","message":"Cannot find name 'process'.","line":196,"column":3},{"code":2304,"fileName":"node_modules/tsickle/src/main.ts","message":"Cannot find name 'process'.","line":196,"column":21}]},"hash":"8802e96bd6c82a580846a6955d2c1bd794e021e3"}