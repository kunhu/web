{"code":"/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// toArray is a temporary function to help in the use of\r\n// ES6 maps and sets when running on node 4, which doesn't\r\n// support Iterators completely.\r\nvar ts = require(\"typescript\");\r\nfunction toArray(iterator) {\r\n    var array = [];\r\n    while (true) {\r\n        var ir = iterator.next();\r\n        if (ir.done) {\r\n            break;\r\n        }\r\n        array.push(ir.value);\r\n    }\r\n    return array;\r\n}\r\nexports.toArray = toArray;\r\n/**\r\n * Constructs a new ts.CompilerHost that overlays sources in substituteSource\r\n * over another ts.CompilerHost.\r\n *\r\n * @param substituteSource A map of source file name -> overlay source text.\r\n */\r\nfunction createSourceReplacingCompilerHost(substituteSource, delegate) {\r\n    return {\r\n        getSourceFile: getSourceFile,\r\n        getCancellationToken: delegate.getCancellationToken,\r\n        getDefaultLibFileName: delegate.getDefaultLibFileName,\r\n        writeFile: delegate.writeFile,\r\n        getCurrentDirectory: delegate.getCurrentDirectory,\r\n        getCanonicalFileName: delegate.getCanonicalFileName,\r\n        useCaseSensitiveFileNames: delegate.useCaseSensitiveFileNames,\r\n        getNewLine: delegate.getNewLine,\r\n        fileExists: delegate.fileExists,\r\n        readFile: delegate.readFile,\r\n        directoryExists: delegate.directoryExists,\r\n        getDirectories: delegate.getDirectories,\r\n    };\r\n    function getSourceFile(fileName, languageVersion, onError) {\r\n        var path = ts.sys.resolvePath(fileName);\r\n        var sourceText = substituteSource.get(path);\r\n        if (sourceText !== undefined) {\r\n            return ts.createSourceFile(fileName, sourceText, languageVersion);\r\n        }\r\n        return delegate.getSourceFile(path, languageVersion, onError);\r\n    }\r\n}\r\nexports.createSourceReplacingCompilerHost = createSourceReplacingCompilerHost;\r\n/**\r\n * Returns the input string with line endings normalized to '\\n'.\r\n */\r\nfunction normalizeLineEndings(input) {\r\n    return input.replace(/\\r\\n/g, '\\n');\r\n}\r\nexports.normalizeLineEndings = normalizeLineEndings;\r\n//# sourceMappingURL=util.js.map","sourceMap":{"version":3,"file":"util.js","sourceRoot":"","sources":["node_modules/tsickle/src/util.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,wDAAwD;AACxD,0DAA0D;AAC1D,gCAAgC;AAEhC,+BAAiC;AAEjC,iBAA2B,QAAqB;IAC9C,IAAM,KAAK,GAAQ,EAAE,CAAC;IACtB,OAAO,IAAI,EAAE,CAAC;QACZ,IAAM,EAAE,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC3B,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;YACZ,KAAK,CAAC;QACR,CAAC;QACD,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC;IACD,MAAM,CAAC,KAAK,CAAC;AACf,CAAC;AAVD,0BAUC;AAED;;;;;GAKG;AACH,2CACI,gBAAqC,EAAE,QAAyB;IAClE,MAAM,CAAC;QACL,aAAa,eAAA;QACb,oBAAoB,EAAE,QAAQ,CAAC,oBAAoB;QACnD,qBAAqB,EAAE,QAAQ,CAAC,qBAAqB;QACrD,SAAS,EAAE,QAAQ,CAAC,SAAS;QAC7B,mBAAmB,EAAE,QAAQ,CAAC,mBAAmB;QACjD,oBAAoB,EAAE,QAAQ,CAAC,oBAAoB;QACnD,yBAAyB,EAAE,QAAQ,CAAC,yBAAyB;QAC7D,UAAU,EAAE,QAAQ,CAAC,UAAU;QAC/B,UAAU,EAAE,QAAQ,CAAC,UAAU;QAC/B,QAAQ,EAAE,QAAQ,CAAC,QAAQ;QAC3B,eAAe,EAAE,QAAQ,CAAC,eAAe;QACzC,cAAc,EAAE,QAAQ,CAAC,cAAc;KACxC,CAAC;IAEF,uBACI,QAAgB,EAAE,eAAgC,EAClD,OAAmC;QACrC,IAAM,IAAI,GAAW,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAClD,IAAM,UAAU,GAAG,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9C,EAAE,CAAC,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,UAAU,EAAE,eAAe,CAAC,CAAC;QACpE,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;IAChE,CAAC;AACH,CAAC;AA3BD,8EA2BC;AAED;;GAEG;AACH,8BAAqC,KAAa;IAChD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACtC,CAAC;AAFD,oDAEC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// toArray is a temporary function to help in the use of\n// ES6 maps and sets when running on node 4, which doesn't\n// support Iterators completely.\n\nimport * as ts from 'typescript';\n\nexport function toArray<T>(iterator: Iterator<T>): T[] {\n  const array: T[] = [];\n  while (true) {\n    const ir = iterator.next();\n    if (ir.done) {\n      break;\n    }\n    array.push(ir.value);\n  }\n  return array;\n}\n\n/**\n * Constructs a new ts.CompilerHost that overlays sources in substituteSource\n * over another ts.CompilerHost.\n *\n * @param substituteSource A map of source file name -> overlay source text.\n */\nexport function createSourceReplacingCompilerHost(\n    substituteSource: Map<string, string>, delegate: ts.CompilerHost): ts.CompilerHost {\n  return {\n    getSourceFile,\n    getCancellationToken: delegate.getCancellationToken,\n    getDefaultLibFileName: delegate.getDefaultLibFileName,\n    writeFile: delegate.writeFile,\n    getCurrentDirectory: delegate.getCurrentDirectory,\n    getCanonicalFileName: delegate.getCanonicalFileName,\n    useCaseSensitiveFileNames: delegate.useCaseSensitiveFileNames,\n    getNewLine: delegate.getNewLine,\n    fileExists: delegate.fileExists,\n    readFile: delegate.readFile,\n    directoryExists: delegate.directoryExists,\n    getDirectories: delegate.getDirectories,\n  };\n\n  function getSourceFile(\n      fileName: string, languageVersion: ts.ScriptTarget,\n      onError?: (message: string) => void): ts.SourceFile {\n    const path: string = ts.sys.resolvePath(fileName);\n    const sourceText = substituteSource.get(path);\n    if (sourceText !== undefined) {\n      return ts.createSourceFile(fileName, sourceText, languageVersion);\n    }\n    return delegate.getSourceFile(path, languageVersion, onError);\n  }\n}\n\n/**\n * Returns the input string with line endings normalized to '\\n'.\n */\nexport function normalizeLineEndings(input: string): string {\n  return input.replace(/\\r\\n/g, '\\n');\n}\n"]},"version":"1","isExternal":true,"dependencies":{"modules":[],"mappings":[{"modulePath":"tslib","resolvedPath":null,"external":false,"resolved":false},{"modulePath":"typescript","resolvedPath":null,"external":false,"resolved":false}],"refFiles":[],"refTypings":[]},"diagnostics":{"syntacticErrors":[],"semanticErrors":[{"code":2307,"fileName":"node_modules/tsickle/src/util.ts","message":"Cannot find module 'typescript'.","line":13,"column":21}]},"hash":"9325b1b987226d071f53749921f31f57a9e35961"}