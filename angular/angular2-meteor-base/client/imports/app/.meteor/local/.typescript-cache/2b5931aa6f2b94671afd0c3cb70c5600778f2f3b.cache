{"code":"/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/** A class that maintains the module dependency graph of output JS files. */\r\nvar ModulesManifest = /** @class */ (function () {\r\n    function ModulesManifest() {\r\n        /** Map of googmodule module name to file name */\r\n        this.moduleToFileName = {};\r\n        /** Map of file name to arrays of imported googmodule module names */\r\n        this.referencedModules = {};\r\n    }\r\n    ModulesManifest.prototype.addManifest = function (other) {\r\n        Object.assign(this.moduleToFileName, other.moduleToFileName);\r\n        Object.assign(this.referencedModules, other.referencedModules);\r\n    };\r\n    ModulesManifest.prototype.addModule = function (fileName, module) {\r\n        this.moduleToFileName[module] = fileName;\r\n        this.referencedModules[fileName] = [];\r\n    };\r\n    ModulesManifest.prototype.addReferencedModule = function (fileName, resolvedModule) {\r\n        this.referencedModules[fileName].push(resolvedModule);\r\n    };\r\n    Object.defineProperty(ModulesManifest.prototype, \"modules\", {\r\n        get: function () {\r\n            return Object.keys(this.moduleToFileName);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ModulesManifest.prototype.getFileNameFromModule = function (module) {\r\n        return this.moduleToFileName[module];\r\n    };\r\n    Object.defineProperty(ModulesManifest.prototype, \"fileNames\", {\r\n        get: function () {\r\n            return Object.keys(this.referencedModules);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ModulesManifest.prototype.getReferencedModules = function (fileName) {\r\n        return this.referencedModules[fileName];\r\n    };\r\n    return ModulesManifest;\r\n}());\r\nexports.ModulesManifest = ModulesManifest;\r\n//# sourceMappingURL=modules_manifest.js.map","sourceMap":{"version":3,"file":"modules_manifest.js","sourceRoot":"","sources":["node_modules/tsickle/src/modules_manifest.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAIH,6EAA6E;AAC7E;IAAA;QACE,iDAAiD;QACzC,qBAAgB,GAAoB,EAAE,CAAC;QAC/C,qEAAqE;QAC7D,sBAAiB,GAAsB,EAAE,CAAC;IA+BpD,CAAC;IA7BC,qCAAW,GAAX,UAAY,KAAsB;QAChC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAC7D,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACjE,CAAC;IAED,mCAAS,GAAT,UAAU,QAAgB,EAAE,MAAc;QACxC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;QACzC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;IACxC,CAAC;IAED,6CAAmB,GAAnB,UAAoB,QAAgB,EAAE,cAAsB;QAC1D,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACxD,CAAC;IAED,sBAAI,oCAAO;aAAX;YACE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC5C,CAAC;;;OAAA;IAED,+CAAqB,GAArB,UAAsB,MAAc;QAClC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;IAED,sBAAI,sCAAS;aAAb;YACE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC7C,CAAC;;;OAAA;IAED,8CAAoB,GAApB,UAAqB,QAAgB;QACnC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC;IACH,sBAAC;AAAD,CAAC,AAnCD,IAmCC;AAnCY,0CAAe","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport interface FileMap<T> { [fileName: string]: T; }\n\n/** A class that maintains the module dependency graph of output JS files. */\nexport class ModulesManifest {\n  /** Map of googmodule module name to file name */\n  private moduleToFileName: FileMap<string> = {};\n  /** Map of file name to arrays of imported googmodule module names */\n  private referencedModules: FileMap<string[]> = {};\n\n  addManifest(other: ModulesManifest) {\n    Object.assign(this.moduleToFileName, other.moduleToFileName);\n    Object.assign(this.referencedModules, other.referencedModules);\n  }\n\n  addModule(fileName: string, module: string): void {\n    this.moduleToFileName[module] = fileName;\n    this.referencedModules[fileName] = [];\n  }\n\n  addReferencedModule(fileName: string, resolvedModule: string): void {\n    this.referencedModules[fileName].push(resolvedModule);\n  }\n\n  get modules(): string[] {\n    return Object.keys(this.moduleToFileName);\n  }\n\n  getFileNameFromModule(module: string): string {\n    return this.moduleToFileName[module];\n  }\n\n  get fileNames(): string[] {\n    return Object.keys(this.referencedModules);\n  }\n\n  getReferencedModules(fileName: string): string[] {\n    return this.referencedModules[fileName];\n  }\n}\n"]},"version":"1","isExternal":true,"dependencies":{"modules":[],"mappings":[{"modulePath":"tslib","resolvedPath":null,"external":false,"resolved":false}],"refFiles":[],"refTypings":[]},"diagnostics":{"syntacticErrors":[],"semanticErrors":[]},"hash":"2b5931aa6f2b94671afd0c3cb70c5600778f2f3b"}